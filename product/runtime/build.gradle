apply plugin: 'java'

import com.chaquo.python.Common;

group = "com.chaquo.python.runtime"

void addArtifact(String name, Task task, Object filename, String abi=null) {
    File f = file(filename)
    def dotPos = f.name.lastIndexOf(".")
    def pub = publishing.publications.maybeCreate(name, MavenPublication)
    pub.artifactId = f.name.substring(0, dotPos)
    pub.artifact(f) {
        builtBy task
        if (abi != null) {
            classifier abi
        }
        extension f.name.substring(dotPos + 1)
    }
}

sourceSets.main.java.srcDirs += ["../buildSrc/src/main/java"]
sourceCompatibility = 7
jar { archiveName = "chaquopy_java.jar" }
addArtifact("java", jar, jar.archivePath)

task("zipPython", type: Zip, group: "build") {
    from fileTree("src/main/python") {
        include "**/*.py"
        include "**/*.dist-info/**"  // For license files
        includeEmptyDirs false
    }
    destinationDir buildDir
    archiveName Common.ASSET_BOOTSTRAP
}
addArtifact("python", zipPython, zipPython.archivePath)


// The following properties file should be created manually. It's also used in
// test_gradle_plugin.py.
String getLocalProperty(String key, String defaultValue = null) {
    def localProps = new Properties()
    localProps.load(project.rootProject.file('local.properties').newDataInputStream())
    def result = localProps.getProperty(key, defaultValue)
    if (result == null) {
        throw new GradleException("'$key' is missing from local.properties")
    }
    return result
}

def sdkDir = getLocalProperty('sdk.dir')
def ndkDir = getLocalProperty('ndk.dir')
def crystaxDir = getLocalProperty('crystax.dir')

def sdkCmakeParentDir = new File(sdkDir, "cmake")
def sdkCmakeDir = "$sdkCmakeParentDir/${sdkCmakeParentDir.list()[0]}"
def androidJar = "$sdkDir/platforms/android-$Common.COMPILE_SDK_VERSION/android.jar"

dependencies {
    compileOnly files(androidJar)
}

for (abi in Common.ABIS) {
    def pyPlusVersion = "python$Common.PYTHON_SUFFIX"
    def pyLibPrefix = ""
    def pyLibSuffix = ".so"
    def javaLibPrefix = "lib"
    def javaLibSuffix = ".so"

    def cmakeBuildSubdir = "$buildDir/cmake/$abi"
    def cmakeBuildType = findProperty("cmakeBuildType") ?: "Debug"
    def cmake = task("cmake-$abi", type: Exec, group: "build") {
        inputs.files "CMakeLists.txt"
        inputs.property("cmakeBuildType", cmakeBuildType)
        outputs.files "$cmakeBuildSubdir/build.ninja", "$cmakeBuildSubdir/rules.ninja",
                      "$cmakeBuildSubdir/CMakeCache.txt"
        doFirst {
            mkdir cmakeBuildSubdir
            delete(outputs.files)   // Otherwise changes to args below won't take effect
        }
        workingDir cmakeBuildSubdir
        executable "$sdkCmakeDir/bin/cmake"
        args "-GNinja", "-DCMAKE_MAKE_PROGRAM=$sdkCmakeDir/bin/ninja",
             "-DCMAKE_BUILD_TYPE=$cmakeBuildType",
             "-DCHAQUOPY_LIBS=$pyPlusVersion"

        def pyDir = "$crystaxDir/sources/python/$Common.PYTHON_VERSION_SHORT"
        args "-DCMAKE_TOOLCHAIN_FILE=$ndkDir/build/cmake/android.toolchain.cmake",
             "-DANDROID_NDK=$ndkDir", "-DANDROID_STL=system",
             "-DANDROID_NATIVE_API_LEVEL=$Common.MIN_SDK_VERSION", "-DANDROID_ABI=$abi",
             "-DCHAQUOPY_INCLUDE_DIRS=$pyDir/include/python",
             "-DCHAQUOPY_LIB_DIRS=$pyDir/libs/$abi"

        args "-DPY_LIB_PREFIX=$pyLibPrefix", "-DPY_LIB_SUFFIX=$pyLibSuffix",
             "-DJAVA_LIB_PREFIX=$javaLibPrefix", "-DJAVA_LIB_SUFFIX=$javaLibSuffix",
             "$projectDir"
    }

    def cmakeBuild = task("cmakeBuild-$abi", type: Exec, group: "build") {
        // No inputs or outputs: the command itself determines whether it's up to date.
        dependsOn cmake
        executable "$sdkCmakeDir/bin/cmake"
        args "--build", cmakeBuildSubdir
    }
    addArtifact("jni", cmakeBuild, "$cmakeBuildSubdir/libchaquopy_java.so", abi)
    addArtifact("module", cmakeBuild, "$cmakeBuildSubdir/chaquopy.so", abi)
}
